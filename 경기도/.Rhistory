}
write.csv(inv, file="NApbl4.csv");
}
A <- as.matrix(read.table("NApbl4.txt"));
A;
GE_Inv(A);
# 4-3
GE_Full <- function(A){
n <- nrow(A);
A <- cbind(A,diag(n));
det1 <- 1;
for (i in 1:n){
# 가장 큰 항의 번호 확인
FN <- which(abs(A[i:n,i]) == max(abs(A[i:n,i])))[1] + (i - 1);
# 피버팅
if (FN != i){
Temp <- A[FN,]; A[FN,] <- A[i,]; A[i,] <- Temp;
det1 <- (-1) * det1; # 피버팅시 행렬식 부호 변호
}
if (A[i,i] == 0) {cat("비정칙 행렬!\n"); return(-1);}
det1 <- det1 * A[i,i];
A[i,] <- A[i,] / A[i,i]; # 각 행의 리딩항으로 행을 나눠 리딩항을 1로 만든다.
# 기본행 연산
for (j in i:n){
if (j != i) A[j,] <- A[j,] - A[i,] * A[j,i];
}
}
# 행렬식 구하기
det1 <- det1 * prod(diag(A));
# 후방대입법 알고리즘
res <- A[,n+1]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
res[i] <- res[i] - (A[i,j] * res[j]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
res[i] <- res[i] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
# 후방대입법 알고리즘
inv <- A[,(n+2):(2*n+1)]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
inv[i,] <- inv[i,] - (A[i,j] * inv[j,]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
inv[i,] <- inv[i,] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
cat(res, "\n");
for (i in 1:n){
for (j in 1:n)
cat(inv[i,j], "\t");
cat("\n");
}
}
load("~/magic9e.RData")
GE_Full(A);
# 4-3
GE_Full <- function(A){
n <- nrow(A);
A <- cbind(A,diag(n));
det1 <- 1;
for (i in 1:n){
# 가장 큰 항의 번호 확인
FN <- which(abs(A[i:n,i]) == max(abs(A[i:n,i])))[1] + (i - 1);
# 피버팅
if (FN != i){
Temp <- A[FN,]; A[FN,] <- A[i,]; A[i,] <- Temp;
det1 <- (-1) * det1; # 피버팅시 행렬식 부호 변호
}
if (A[i,i] == 0) {cat("비정칙 행렬!\n"); return(-1);}
det1 <- det1 * A[i,i];
A[i,] <- A[i,] / A[i,i]; # 각 행의 리딩항으로 행을 나눠 리딩항을 1로 만든다.
# 기본행 연산
for (j in i:n){
if (j != i) A[j,] <- A[j,] - A[i,] * A[j,i];
}
}
# 행렬식 구하기
det1 <- det1 * prod(diag(A));
cat("행렬식 : ", det1, "\n\n");
# 후방대입법 알고리즘
res <- A[,n+1]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
res[i] <- res[i] - (A[i,j] * res[j]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
res[i] <- res[i] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
# 후방대입법 알고리즘
inv <- A[,(n+2):(2*n+1)]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
inv[i,] <- inv[i,] - (A[i,j] * inv[j,]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
inv[i,] <- inv[i,] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
res <- matrix(res, n, 1);
cat("연립방정식 해 : ", res, "\n\n");
inv <- matrix(inv, n, n);
print(inv);
B <- as.matrix(read.table("magic9e.txt"));
print(round(inv %*% B[,1:n], digits=5));
print(round(B[,1:n] %*% inv, digits=5));
}
GE_Full(A);
GE_Full(A);
# 4-1
GE <- function(A){
n <- nrow(A);
A <- cbind(A,diag(n));
det1 <- 1;
for (i in 1:n){
# 가장 큰 항의 번호 확인
FN <- which(abs(A[i:n,i]) == max(abs(A[i:n,i])))[1] + (i - 1);
# 피버팅
if (FN != i){
Temp <- A[FN,]; A[FN,] <- A[i,]; A[i,] <- Temp;
det1 <- (-1) * det1; # 피버팅시 행렬식 부호 변호
}
if (A[i,i] == 0) {cat("비정칙 행렬!\n"); return(-1);}
det1 <- det1 * A[i,i];
A[i,] <- A[i,] / A[i,i]; # 각 행의 리딩항으로 행을 나눠 리딩항을 1로 만든다.
# 기본행 연산
for (j in i:n){
if (j != i) A[j,] <- A[j,] - A[i,] * A[j,i];
}
}
write.table(A, "NApbl4.txt");
return(det1);
}
A <- as.matrix(read.table("magic9e.txt"));
GE(A);
A <- as.matrix(read.table("NApbl4.txt"));
A;
GE_Inv(A);
GE_Inv <- function(A){
n <- nrow(A);
# 후방대입법 알고리즘
inv <- A[,(n+2):(2*n+1)]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
inv[i,] <- inv[i,] - (A[i,j] * inv[j,]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
inv[i,] <- inv[i,] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
# 역행렬 출력
for (i in 1:n){
for (j in 1:n)
cat(inv[i,j], "\t");
cat("\n");
}
write.csv(inv, file="NApbl4.csv", quote=F, row.names=F);
}
GE_Inv(A);
A <- as.matrix(read.table("NApbl4.txt"));
A;
GE_Inv(A);
GE_Inv(A);
A <- as.matrix(read.table("matrix2.txt"));
GE(A);
A <- as.matrix(read.table("NApbl4.txt"));
GE_Inv(A);
GE_Inv(A);
# 4-3
GE_Full <- function(A){
n <- nrow(A);
A <- cbind(A,diag(n));
det1 <- 1;
for (i in 1:n){
# 가장 큰 항의 번호 확인
FN <- which(abs(A[i:n,i]) == max(abs(A[i:n,i])))[1] + (i - 1);
# 피버팅
if (FN != i){
Temp <- A[FN,]; A[FN,] <- A[i,]; A[i,] <- Temp;
det1 <- (-1) * det1; # 피버팅시 행렬식 부호 변호
}
if (A[i,i] == 0) {cat("비정칙 행렬!\n"); return(-1);}
det1 <- det1 * A[i,i];
A[i,] <- A[i,] / A[i,i]; # 각 행의 리딩항으로 행을 나눠 리딩항을 1로 만든다.
# 기본행 연산
for (j in i:n){
if (j != i) A[j,] <- A[j,] - A[i,] * A[j,i];
}
}
# 행렬식 구하기
det1 <- det1 * prod(diag(A));
cat("행렬식 : ", det1, "\n\n");
# 후방대입법 알고리즘
res <- A[,n+1]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
res[i] <- res[i] - (A[i,j] * res[j]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
res[i] <- res[i] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
# 후방대입법 알고리즘
inv <- A[,(n+2):(2*n+1)]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
inv[i,] <- inv[i,] - (A[i,j] * inv[j,]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
inv[i,] <- inv[i,] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
res <- matrix(res, n, 1);
cat("연립방정식 해 : ", res, "\n\n");
inv <- matrix(inv, n, n);
print(inv);
B <- as.matrix(read.table("magic9e.txt"));
print(round(inv %*% B[,1:n], digits=5));
print(round(B[,1:n] %*% inv, digits=5));
}
load("~/magic9e.RData")
GE_Full(A);
A <- as.matrix(read.table("matrix2.txt"));
save(A, file="matrix2.RData");
load("~/matrix2.RData")
GE_Full(A);
GE_Full(A);
A <- as.matrix(read.table("matrix2.txt"));
save(A, file="matrix2.RData");
A;
GE_Full(A);
# 4-3
GE_Full <- function(A){
n <- nrow(A);
B <- A;
A <- cbind(A,diag(n));
det1 <- 1;
for (i in 1:n){
# 가장 큰 항의 번호 확인
FN <- which(abs(A[i:n,i]) == max(abs(A[i:n,i])))[1] + (i - 1);
# 피버팅
if (FN != i){
Temp <- A[FN,]; A[FN,] <- A[i,]; A[i,] <- Temp;
det1 <- (-1) * det1; # 피버팅시 행렬식 부호 변호
}
if (A[i,i] == 0) {cat("비정칙 행렬!\n"); return(-1);}
det1 <- det1 * A[i,i];
A[i,] <- A[i,] / A[i,i]; # 각 행의 리딩항으로 행을 나눠 리딩항을 1로 만든다.
# 기본행 연산
for (j in i:n){
if (j != i) A[j,] <- A[j,] - A[i,] * A[j,i];
}
}
# 행렬식 구하기
det1 <- det1 * prod(diag(A));
cat("행렬식 : ", det1, "\n\n");
# 후방대입법 알고리즘
res <- A[,n+1]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
res[i] <- res[i] - (A[i,j] * res[j]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
res[i] <- res[i] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
# 후방대입법 알고리즘
inv <- A[,(n+2):(2*n+1)]; # 결과변수
# 나머지 해를 구한다.
for (i in (n-1):1)
{
for (j in n:(i+1))
inv[i,] <- inv[i,] - (A[i,j] * inv[j,]); # 리딩항을 제외한 나머지를 해와 곱한 뒤 빼준다.
inv[i,] <- inv[i,] / A[i,i]; # 다 뺀 결과를 리딩항으로 나눈다.
}
res <- matrix(res, n, 1);
cat("연립방정식 해 : ", res, "\n\n");
inv <- matrix(inv, n, n);
print(inv);
print(round(inv %*% B[,1:n], digits=5));
print(round(B[,1:n] %*% inv, digits=5));
}
load("~/matrix2.RData")
GE_Full(A);
det(A);
det(A[,1:5]);
A <- as.matrix(read.table("matrix2.txt"));
save(A, file="matrix2.RData");
A;
det(A);
det(A[,1:5]);
GE_Full(A);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
A[i, j] <- ((A[i+1, j-1] - A[i, j-1]) / (x[j+(i-1)] - x[i]));
return (A);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom(x, y);
Newtom(x, y);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
return (A);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
return (Table);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
Table <- cbind(x, Table);
return (Table);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[i+1] - x[i]));
Table <- cbind(x, Table);
return (Table);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
Table <- cbind(x, Table);
return (Table);
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
Table <- cbind(x, Table);
return (round(Table, digits=5));
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.8, 3.2, 2.5);
Newtom(x, y);
Newtom <- function(x, y)
{
n <- length(y);
Table <- matrix(0, n, n);
Table[,1] <- y; # 차분표 초기화
for (j in 2:n)
for (i in 1:(n+1-j))
Table[i, j] <- ((Table[i+1, j-1] - Table[i, j-1]) / (x[j+(i-1)] - x[i]));
Table <- cbind(x, Table);
return (round(Table, digits=5));
}
x <- c(1.1, 2.5, 4, 5.1, 5.9);
y <- c(3.9, 4.3, 4.08, 3.2, 2.5);
Newtom(x, y);
Vande <- function(x, y)
{
n <- length(x);
A <- matrix(0, n, n);
for (i in 2:n)
A[,i] <- A[,i-1] * x;
return(A);
}
Vande(x, y);
Vande <- function(x, y)
{
n <- length(x);
A <- matrix(0, n, n);
A[,1] <- 1;
for (i in 2:n)
A[,i] <- A[,i-1] * x;
return(A);
}
Vande(x, y);
A <- expression(exp(sin(pi * cosh(log2(3*cos(x)))^2));
A <- expression(exp(sin(pi * cosh(log2(3*cos(x)))^2)));
D(A)
D(A, x)
D(x, A)
D('x', A)
D(A, 'x')
pi
eval(D(A, 'x'), 1)
B<-D(A, 'x');
eval(B, 1);
eval(1, B);
library(RMySQL);
User_Name = 'root';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129:3306';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=Database, host=Host);
User_Name = 'root';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129:3306';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host);
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port='3306');
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
User_Name = 'mysql';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
User_Name = 'root';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
library(DBI);
# DB사용을 위한 라이브러리 설치
# install.packages("RMySQL");
# install.packages("DBI");
library(RMySQL);
User_Name = 'root';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=Host, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host=192.168.149.129, port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129");
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129");
MyDB = dbConnect(MySQL(), user=User_Name, host="192.168.149.129");
MyDB = dbConnect(MySQL(), user=User_Name, host="192.168.149.129");
MyDB = dbConnect(MySQL(), user=User_Name, host="192.168.149.129");
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
User_Name = 'mysql';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
User_Name = 'root';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
User_Name = 'myproj';
PW = '06dktmskf)^';
DataBase='Project';
Host='192.168.149.129';
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user=User_Name, password=PW, dbname=DataBase, host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user='myproj', password='06dktmskf)^', dbname='Project', host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user='myproj', password='06dktmskf)^', dbname='Project', host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user='myproj', password='06dktmskf)^', dbname='Project', host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user='myproj', password='06dktmskf)^', dbname='Project', host="192.168.149.129", port=3306);
MyDB = dbConnect(MySQL(), user=DB_User, password=DB_PW, dbname=DB_Name, host=DB_Host, port=DB_Port);
MyDB = dbConnect(MySQL(), user=DB_User, password=DB_PW, dbname=DB_Name, host=DB_Host, port=DB_Port);
DB_User = 'root';
DB_PW = '06dktmskf)^';
DB_Name='Project';
DB_Host='192.168.149.129';
DB_Port=3306;
MyDB = dbConnect(MySQL(), user=DB_User, password=DB_PW, dbname=DB_Name, host=DB_Host, port=DB_Port);
setwd("~/OpenSourceLec/경기도")
setwd(".")
#경기도 장애인 단기보호시설
st_fasc <- read.csv("경기도 장애인 단기보호시설 현황 .csv");
